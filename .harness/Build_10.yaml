template:
  name: Build
  identifier: Build
  versionLabel: "1.0"
  type: Stage
  projectIdentifier: TractableTest
  orgIdentifier: default
  tags: {}
  spec:
    type: CI
    spec:
      cloneCodebase: true
      infrastructure:
        type: KubernetesDirect
        spec:
          connectorRef: <+input>
          namespace: harness-build
          automountServiceAccountToken: true
          nodeSelector: {}
          os: Linux
      execution:
        steps:
          - parallel:
              - step:
                  type: RestoreCacheS3
                  spec:
                    connectorRef: <+input>
                    region: eu-west-1
                    bucket: tractableai-dev-utilities
                    key: harness/cache/<+project.identifier>/<+pipeline.name>/<+stage.identifier>
                    archiveFormat: Tar
                    resources:
                      limits:
                        cpu: "1"
                  name: Restore Cache
                  identifier: Restore_Cache
                  when:
                    stageStatus: Success
                    condition: "false"
                  failureStrategies: []
              - step:
                  name: Generate Docker Tag
                  identifier: Generate_Docker_Tag
                  template:
                    templateRef: account.Generate_Tag
                    versionLabel: 2.3.6
                    templateInputs:
                      type: Run
                      spec:
                        envVariables:
                          TAG_PREFIX: <+stage.variables.CLUSTER_ENV>
                          DOCKER_IMAGE: tractableio/developer-portal
                          TAG_OVERRIDE: "null"
                          ADD_GIT_TAG: "null"
                      when:
                        condition: "true"
              - step:
                  type: Run
                  name: Create GitHub App Credentials YAML
                  identifier: Create_githubappcredentialsyaml
                  spec:
                    connectorRef: account.Tractable_Docker_Hub
                    image: alpine:latest
                    shell: Sh
                    command: |-
                      ls -al

                      cat > github-app-credentials.yaml << EOF
                      <+secrets.getValue("Backstage_GitHub_App_Credentials")>
                      EOF

                      ls -al

                      wc -c github-app-credentials.yaml
          - step:
              type: Run
              spec:
                connectorRef: account.Tractable_Docker_Hub
                image: <+input>
                shell: Sh
                command: |-
                  yarn install
                  yarn tsc
                  yarn build:backend
                envVariables:
                  DATADOG_APPLICATION_ID: <+secrets.getValue("Datadog_RUM_devportal_application_ID")>
                  DATADOG_CLIENT_TOKEN: <+secrets.getValue("Datadog_RUM_devportal_client_token")>
                  CLUSTER_ENV: <+stage.variables.CLUSTER_ENV>
                resources:
                  limits:
                    memory: 8Gi
                    cpu: "8"
              name: Yarn Build
              identifier: Yarn_Build
          - parallel:
              - step:
                  type: BuildAndPushDockerRegistry
                  spec:
                    connectorRef: account.Tractable_Docker_Hub_v1
                    repo: <+stage.spec.execution.steps.Generate_Docker_Tag.output.outputVariables.DOCKER_IMAGE>
                    tags:
                      - <+stage.spec.execution.steps.Generate_Docker_Tag.output.outputVariables.DOCKER_TAG>
                    dockerfile: packages/backend/Dockerfile
                    optimize: false
                    remoteCacheRepo: <+stage.spec.execution.steps.Generate_Docker_Tag.output.outputVariables.DOCKER_IMAGE>-cache
                    resources:
                      limits:
                        memory: 4Gi
                        cpu: "8"
                  name: Build and Push to Docker
                  identifier: Build_and_Push_to_Docker
              - step:
                  name: Update Cache
                  identifier: Update_Cache
                  template:
                    templateRef: account.Save_S3_Cache
                    versionLabel: "1.0"
                    templateInputs:
                      type: SaveCacheS3
                      spec:
                        key: <+input>
                        sourcePaths:
                          - node_modules
                          - packages/app/node_modules
                          - packages/backend/node_modules
                        override: <+input>
    variables:
      - name: PLUGIN_ACL
        type: String
        description: ""
        value: bucket-owner-full-control
      - name: CLUSTER_ENV
        type: String
        description: ""
        value: <+input>.allowedValues(dev,infra-eu)
    when:
      pipelineStatus: Success
      condition: <+input>
    failureStrategies:
      - onFailure:
          errors:
            - AllErrors
          action:
            type: Retry
            spec:
              retryCount: 2
              retryIntervals:
                - 1s
                - 30s
              onRetryFailure:
                action:
                  type: Abort
